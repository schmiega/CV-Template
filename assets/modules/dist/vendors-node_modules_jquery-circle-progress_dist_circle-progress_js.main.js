/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk"] = self["webpackChunk"] || []).push([["vendors-node_modules_jquery-circle-progress_dist_circle-progress_js"],{

/***/ "./node_modules/jquery-circle-progress/dist/circle-progress.js":
/*!*********************************************************************!*\
  !*** ./node_modules/jquery-circle-progress/dist/circle-progress.js ***!
  \*********************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**\n * jquery-circle-progress - jQuery Plugin to draw animated circular progress bars:\n * {@link http://kottenator.github.io/jquery-circle-progress/}\n *\n * @author Rostyslav Bryzgunov <kottenator@gmail.com>\n * @version 1.2.2\n * @licence MIT\n * @preserve\n */\n// UMD factory - https://github.com/umdjs/umd/blob/d31bb6ee7098715e019f52bdfe27b3e4bfd2b97e/templates/jqueryPlugin.js\n// Uses AMD, CommonJS or browser globals to create a jQuery plugin.\n(function(factory) {\n  if (true) {\n    // AMD - register as an anonymous module\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! jquery */ \"./node_modules/jquery/dist/jquery.js\")], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else { var $; }\n})(function($) {\n  /**\n   * Inner implementation of the circle progress bar.\n   * The class is not exposed _yet_ but you can create an instance through jQuery method call.\n   *\n   * @param {object} config - You can customize any class member (property or method).\n   * @class\n   * @alias CircleProgress\n   */\n  function CircleProgress(config) {\n    this.init(config);\n  }\n\n  CircleProgress.prototype = {\n    //--------------------------------------- public options ---------------------------------------\n    /**\n     * This is the only required option. It should be from `0.0` to `1.0`.\n     * @type {number}\n     * @default 0.0\n     */\n    value: 0.0,\n\n    /**\n     * Size of the canvas in pixels.\n     * It's a square so we need only one dimension.\n     * @type {number}\n     * @default 100.0\n     */\n    size: 100.0,\n\n    /**\n     * Initial angle for `0.0` value in radians.\n     * @type {number}\n     * @default -Math.PI\n     */\n    startAngle: -Math.PI,\n\n    /**\n     * Width of the arc in pixels.\n     * If it's `'auto'` - the value is calculated as `[this.size]{@link CircleProgress#size} / 14`.\n     * @type {number|string}\n     * @default 'auto'\n     */\n    thickness: 'auto',\n\n    /**\n     * Fill of the arc. You may set it to:\n     *\n     *   - solid color:\n     *     - `'#3aeabb'`\n     *     - `{ color: '#3aeabb' }`\n     *     - `{ color: 'rgba(255, 255, 255, .3)' }`\n     *   - linear gradient _(left to right)_:\n     *     - `{ gradient: ['#3aeabb', '#fdd250'], gradientAngle: Math.PI / 4 }`\n     *     - `{ gradient: ['red', 'green', 'blue'], gradientDirection: [x0, y0, x1, y1] }`\n     *     - `{ gradient: [[\"red\", .2], [\"green\", .3], [\"blue\", .8]] }`\n     *   - image:\n     *     - `{ image: 'http://i.imgur.com/pT0i89v.png' }`\n     *     - `{ image: imageObject }`\n     *     - `{ color: 'lime', image: 'http://i.imgur.com/pT0i89v.png' }` -\n     *       color displayed until the image is loaded\n     *\n     * @default {gradient: ['#3aeabb', '#fdd250']}\n     */\n    fill: {\n      gradient: ['#3aeabb', '#fdd250']\n    },\n\n    /**\n     * Color of the \"empty\" arc. Only a color fill supported by now.\n     * @type {string}\n     * @default 'rgba(0, 0, 0, .1)'\n     */\n    emptyFill: 'rgba(0, 0, 0, .1)',\n\n    /**\n     * jQuery Animation config.\n     * You can pass `false` to disable the animation.\n     * @see http://api.jquery.com/animate/\n     * @type {object|boolean}\n     * @default {duration: 1200, easing: 'circleProgressEasing'}\n     */\n    animation: {\n      duration: 1200,\n      easing: 'circleProgressEasing'\n    },\n\n    /**\n     * Default animation starts at `0.0` and ends at specified `value`. Let's call this _direct animation_.\n     * If you want to make _reversed animation_ - set `animationStartValue: 1.0`.\n     * Also you may specify any other value from `0.0` to `1.0`.\n     * @type {number}\n     * @default 0.0\n     */\n    animationStartValue: 0.0,\n\n    /**\n     * Reverse animation and arc draw.\n     * By default, the arc is filled from `0.0` to `value`, _clockwise_.\n     * With `reverse: true` the arc is filled from `1.0` to `value`, _counter-clockwise_.\n     * @type {boolean}\n     * @default false\n     */\n    reverse: false,\n\n    /**\n     * Arc line cap: `'butt'`, `'round'` or `'square'` -\n     * [read more]{@link https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D.lineCap}.\n     * @type {string}\n     * @default 'butt'\n     */\n    lineCap: 'butt',\n\n    /**\n     * Canvas insertion mode: append or prepend it into the parent element?\n     * @type {string}\n     * @default 'prepend'\n     */\n    insertMode: 'prepend',\n\n    //------------------------------ protected properties and methods ------------------------------\n    /**\n     * Link to {@link CircleProgress} constructor.\n     * @protected\n     */\n    constructor: CircleProgress,\n\n    /**\n     * Container element. Should be passed into constructor config.\n     * @protected\n     * @type {jQuery}\n     */\n    el: null,\n\n    /**\n     * Canvas element. Automatically generated and prepended to [this.el]{@link CircleProgress#el}.\n     * @protected\n     * @type {HTMLCanvasElement}\n     */\n    canvas: null,\n\n    /**\n     * 2D-context of [this.canvas]{@link CircleProgress#canvas}.\n     * @protected\n     * @type {CanvasRenderingContext2D}\n     */\n    ctx: null,\n\n    /**\n     * Radius of the outer circle. Automatically calculated as `[this.size]{@link CircleProgress#size} / 2`.\n     * @protected\n     * @type {number}\n     */\n    radius: 0.0,\n\n    /**\n     * Fill of the main arc. Automatically calculated, depending on [this.fill]{@link CircleProgress#fill} option.\n     * @protected\n     * @type {string|CanvasGradient|CanvasPattern}\n     */\n    arcFill: null,\n\n    /**\n     * Last rendered frame value.\n     * @protected\n     * @type {number}\n     */\n    lastFrameValue: 0.0,\n\n    /**\n     * Init/re-init the widget.\n     *\n     * Throws a jQuery event:\n     *\n     * - `circle-inited(jqEvent)`\n     *\n     * @param {object} config - You can customize any class member (property or method).\n     */\n    init: function(config) {\n      $.extend(this, config);\n      this.radius = this.size / 2;\n      this.initWidget();\n      this.initFill();\n      this.draw();\n      this.el.trigger('circle-inited');\n    },\n\n    /**\n     * Initialize `<canvas>`.\n     * @protected\n     */\n    initWidget: function() {\n      if (!this.canvas)\n        this.canvas = $('<canvas>')[this.insertMode == 'prepend' ? 'prependTo' : 'appendTo'](this.el)[0];\n\n      var canvas = this.canvas;\n      canvas.width = this.size;\n      canvas.height = this.size;\n      this.ctx = canvas.getContext('2d');\n\n      if (window.devicePixelRatio > 1) {\n        var scaleBy = window.devicePixelRatio;\n        canvas.style.width = canvas.style.height = this.size + 'px';\n        canvas.width = canvas.height = this.size * scaleBy;\n        this.ctx.scale(scaleBy, scaleBy);\n      }\n    },\n\n    /**\n     * This method sets [this.arcFill]{@link CircleProgress#arcFill}.\n     * It could do this async (on image load).\n     * @protected\n     */\n    initFill: function() {\n      var self = this,\n        fill = this.fill,\n        ctx = this.ctx,\n        size = this.size;\n\n      if (!fill)\n        throw Error(\"The fill is not specified!\");\n\n      if (typeof fill == 'string')\n        fill = {color: fill};\n\n      if (fill.color)\n        this.arcFill = fill.color;\n\n      if (fill.gradient) {\n        var gr = fill.gradient;\n\n        if (gr.length == 1) {\n          this.arcFill = gr[0];\n        } else if (gr.length > 1) {\n          var ga = fill.gradientAngle || 0, // gradient direction angle; 0 by default\n            gd = fill.gradientDirection || [\n                size / 2 * (1 - Math.cos(ga)), // x0\n                size / 2 * (1 + Math.sin(ga)), // y0\n                size / 2 * (1 + Math.cos(ga)), // x1\n                size / 2 * (1 - Math.sin(ga))  // y1\n              ];\n\n          var lg = ctx.createLinearGradient.apply(ctx, gd);\n\n          for (var i = 0; i < gr.length; i++) {\n            var color = gr[i],\n              pos = i / (gr.length - 1);\n\n            if ($.isArray(color)) {\n              pos = color[1];\n              color = color[0];\n            }\n\n            lg.addColorStop(pos, color);\n          }\n\n          this.arcFill = lg;\n        }\n      }\n\n      if (fill.image) {\n        var img;\n\n        if (fill.image instanceof Image) {\n          img = fill.image;\n        } else {\n          img = new Image();\n          img.src = fill.image;\n        }\n\n        if (img.complete)\n          setImageFill();\n        else\n          img.onload = setImageFill;\n      }\n\n      function setImageFill() {\n        var bg = $('<canvas>')[0];\n        bg.width = self.size;\n        bg.height = self.size;\n        bg.getContext('2d').drawImage(img, 0, 0, size, size);\n        self.arcFill = self.ctx.createPattern(bg, 'no-repeat');\n        self.drawFrame(self.lastFrameValue);\n      }\n    },\n\n    /**\n     * Draw the circle.\n     * @protected\n     */\n    draw: function() {\n      if (this.animation)\n        this.drawAnimated(this.value);\n      else\n        this.drawFrame(this.value);\n    },\n\n    /**\n     * Draw a single animation frame.\n     * @protected\n     * @param {number} v - Frame value.\n     */\n    drawFrame: function(v) {\n      this.lastFrameValue = v;\n      this.ctx.clearRect(0, 0, this.size, this.size);\n      this.drawEmptyArc(v);\n      this.drawArc(v);\n    },\n\n    /**\n     * Draw the arc (part of the circle).\n     * @protected\n     * @param {number} v - Frame value.\n     */\n    drawArc: function(v) {\n      if (v === 0)\n        return;\n\n      var ctx = this.ctx,\n        r = this.radius,\n        t = this.getThickness(),\n        a = this.startAngle;\n\n      ctx.save();\n      ctx.beginPath();\n\n      if (!this.reverse) {\n        ctx.arc(r, r, r - t / 2, a, a + Math.PI * 2 * v);\n      } else {\n        ctx.arc(r, r, r - t / 2, a - Math.PI * 2 * v, a);\n      }\n\n      ctx.lineWidth = t;\n      ctx.lineCap = this.lineCap;\n      ctx.strokeStyle = this.arcFill;\n      ctx.stroke();\n      ctx.restore();\n    },\n\n    /**\n     * Draw the _empty (background)_ arc (part of the circle).\n     * @protected\n     * @param {number} v - Frame value.\n     */\n    drawEmptyArc: function(v) {\n      var ctx = this.ctx,\n        r = this.radius,\n        t = this.getThickness(),\n        a = this.startAngle;\n\n      if (v < 1) {\n        ctx.save();\n        ctx.beginPath();\n\n        if (v <= 0) {\n          ctx.arc(r, r, r - t / 2, 0, Math.PI * 2);\n        } else {\n          if (!this.reverse) {\n            ctx.arc(r, r, r - t / 2, a + Math.PI * 2 * v, a);\n          } else {\n            ctx.arc(r, r, r - t / 2, a, a - Math.PI * 2 * v);\n          }\n        }\n\n        ctx.lineWidth = t;\n        ctx.strokeStyle = this.emptyFill;\n        ctx.stroke();\n        ctx.restore();\n      }\n    },\n\n    /**\n     * Animate the progress bar.\n     *\n     * Throws 3 jQuery events:\n     *\n     * - `circle-animation-start(jqEvent)`\n     * - `circle-animation-progress(jqEvent, animationProgress, stepValue)` - multiple event\n     *   animationProgress: from `0.0` to `1.0`; stepValue: from `0.0` to `value`\n     * - `circle-animation-end(jqEvent)`\n     *\n     * @protected\n     * @param {number} v - Final value.\n     */\n    drawAnimated: function(v) {\n      var self = this,\n        el = this.el,\n        canvas = $(this.canvas);\n\n      // stop previous animation before new \"start\" event is triggered\n      canvas.stop(true, false);\n      el.trigger('circle-animation-start');\n\n      canvas\n        .css({animationProgress: 0})\n        .animate({animationProgress: 1}, $.extend({}, this.animation, {\n          step: function(animationProgress) {\n            var stepValue = self.animationStartValue * (1 - animationProgress) + v * animationProgress;\n            self.drawFrame(stepValue);\n            el.trigger('circle-animation-progress', [animationProgress, stepValue]);\n          }\n        }))\n        .promise()\n        .always(function() {\n          // trigger on both successful & failure animation end\n          el.trigger('circle-animation-end');\n        });\n    },\n\n    /**\n     * Get the circle thickness.\n     * @see CircleProgress#thickness\n     * @protected\n     * @returns {number}\n     */\n    getThickness: function() {\n      return $.isNumeric(this.thickness) ? this.thickness : this.size / 14;\n    },\n\n    /**\n     * Get current value.\n     * @protected\n     * @return {number}\n     */\n    getValue: function() {\n      return this.value;\n    },\n\n    /**\n     * Set current value (with smooth animation transition).\n     * @protected\n     * @param {number} newValue\n     */\n    setValue: function(newValue) {\n      if (this.animation)\n        this.animationStartValue = this.lastFrameValue;\n      this.value = newValue;\n      this.draw();\n    }\n  };\n\n  //----------------------------------- Initiating jQuery plugin -----------------------------------\n  $.circleProgress = {\n    // Default options (you may override them)\n    defaults: CircleProgress.prototype\n  };\n\n  // ease-in-out-cubic\n  $.easing.circleProgressEasing = function(x) {\n    if (x < 0.5) {\n      x = 2 * x;\n      return 0.5 * x * x * x;\n    } else {\n      x = 2 - 2 * x;\n      return 1 - 0.5 * x * x * x;\n    }\n  };\n\n  /**\n   * Creates an instance of {@link CircleProgress}.\n   * Produces [init event]{@link CircleProgress#init} and [animation events]{@link CircleProgress#drawAnimated}.\n   *\n   * @param {object} [configOrCommand] - Config object or command name.\n   *\n   * Config example (you can specify any {@link CircleProgress} property):\n   *\n   * ```js\n   * { value: 0.75, size: 50, animation: false }\n   * ```\n   *\n   * Commands:\n   *\n   * ```js\n   * el.circleProgress('widget'); // get the <canvas>\n   * el.circleProgress('value'); // get the value\n   * el.circleProgress('value', newValue); // update the value\n   * el.circleProgress('redraw'); // redraw the circle\n   * el.circleProgress(); // the same as 'redraw'\n   * ```\n   *\n   * @param {string} [commandArgument] - Some commands (like `'value'`) may require an argument.\n   * @see CircleProgress\n   * @alias \"$(...).circleProgress\"\n   */\n  $.fn.circleProgress = function(configOrCommand, commandArgument) {\n    var dataName = 'circle-progress',\n      firstInstance = this.data(dataName);\n\n    if (configOrCommand == 'widget') {\n      if (!firstInstance)\n        throw Error('Calling \"widget\" method on not initialized instance is forbidden');\n      return firstInstance.canvas;\n    }\n\n    if (configOrCommand == 'value') {\n      if (!firstInstance)\n        throw Error('Calling \"value\" method on not initialized instance is forbidden');\n      if (typeof commandArgument == 'undefined') {\n        return firstInstance.getValue();\n      } else {\n        var newValue = arguments[1];\n        return this.each(function() {\n          $(this).data(dataName).setValue(newValue);\n        });\n      }\n    }\n\n    return this.each(function() {\n      var el = $(this),\n        instance = el.data(dataName),\n        config = $.isPlainObject(configOrCommand) ? configOrCommand : {};\n\n      if (instance) {\n        instance.init(config);\n      } else {\n        var initialConfig = $.extend({}, el.data());\n        if (typeof initialConfig.fill == 'string')\n          initialConfig.fill = JSON.parse(initialConfig.fill);\n        if (typeof initialConfig.animation == 'string')\n          initialConfig.animation = JSON.parse(initialConfig.animation);\n        config = $.extend(initialConfig, config);\n        config.el = el;\n        instance = new CircleProgress(config);\n        el.data(dataName, instance);\n      }\n    });\n  };\n});\n\n\n//# sourceURL=webpack:///./node_modules/jquery-circle-progress/dist/circle-progress.js?");

/***/ })

}]);